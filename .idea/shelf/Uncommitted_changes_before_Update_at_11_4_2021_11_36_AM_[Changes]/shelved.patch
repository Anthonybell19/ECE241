Index: project2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Graph import *\r\nimport random\r\n\r\nclass ISPNetwork:\r\n\r\n    def __init__(self):\r\n        self.network = Graph()\r\n        self.MST = Graph()\r\n\r\n    def buildGraph(self, filename):\r\n        graph = Graph()\r\n        file = open(filename, 'r')\r\n        info = file.readlines()\r\n        for i in info:\r\n            l = i.split(',')\r\n            weight = int(l[2][-2])\r\n            graph.addEdge(l[0],l[1], weight)\r\n        self.network = graph\r\n\r\n\r\n    def pathExist(self, router1, route2):\r\n        r1 = self.network.getVertex(router1)\r\n        r2 = self.network.getVertex(route2)\r\n        bfs(self.network, self.network.getVertex(router1))\r\n\r\n        # else:\r\n        #     return False\r\n\r\n        pass\r\n\r\n    def buildMST(self):\r\n        pass\r\n\r\n    def findPath(self, router1, router2):\r\n        pass\r\n\r\n    def findForwardingPath(self, router1, router2):\r\n        pass\r\n\r\n    def findPathMaxWeight(self, router1, router2):\r\n        pass\r\n\r\n    @staticmethod\r\n    def nodeEdgeWeight(v):\r\n        return sum([w for w in v.connectedTo.values()])\r\n\r\n    @staticmethod\r\n    def totalEdgeWeight(g):\r\n        return sum([ISPNetwork.nodeEdgeWeight(v) for v in g]) // 2\r\ndef bfs(g, start):\r\n    visited = []\r\n    queue = []\r\n    visited.append(node)\r\n    queue.append(node)\r\n\r\n    while queue:  # Creating loop to visit each node\r\n        m = queue.pop(0)\r\n        print(m, end=\" \")\r\n\r\n        for neighbour in graph[m]:\r\n            if neighbour not in visited:\r\n                visited.append(neighbour)\r\n                queue.append(neighbour)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"--------- Task1 build graph ---------\")\r\n    # Note: You should try all six dataset. This is just a example using 1221.csv\r\n    net = ISPNetwork()\r\n    net.buildGraph('data/1221.csv')\r\n\r\n    print(\"--------- Task2 check if path exists ---------\")\r\n    routers = [v.id for v in random.sample(list(net.network.vertList.values()), 5)]\r\n    for i in range(4):\r\n        print('Router1:', routers[i], ', Router2:', routers[i+1], 'path exist?:', net.pathExist(routers[i], routers[i+1]))\r\n\r\n    print(\"--------- Task3 build MST ---------\")\r\n    net.buildMST()\r\n    print('graph node size', net.MST.numVertices)\r\n    print('graph total edge weights', net.totalEdgeWeight(net.MST))\r\n\r\n    print(\"--------- Task4 find shortest path in MST ---------\")\r\n    for i in range(4):\r\n        print(routers[i], routers[i+1], 'Path:', net.findPath(routers[i], routers[i+1]))\r\n\r\n    print(\"--------- Task5 find shortest path in original graph ---------\")\r\n    for i in range(4):\r\n        print(routers[i], routers[i+1], 'Path:', net.findForwardingPath(routers[i], routers[i+1]))\r\n\r\n    print(\"--------- Task6 find path in LowestMaxWeightFirst algorithm ---------\")\r\n    for i in range(4):\r\n        print(routers[i], routers[i+1], 'Path:', net.findPathMaxWeight(routers[i], routers[i+1]))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project2.py b/project2.py
--- a/project2.py	(revision e4faaabcddb55fb40f29623bdfbdf85e6ede1544)
+++ b/project2.py	(date 1635971126693)
@@ -1,6 +1,7 @@
 from Graph import *
 import random
 
+
 class ISPNetwork:
 
     def __init__(self):
@@ -14,17 +15,17 @@
         for i in info:
             l = i.split(',')
             weight = int(l[2][-2])
-            graph.addEdge(l[0],l[1], weight)
+            graph.addEdge(l[0], l[1], weight)
         self.network = graph
 
-
     def pathExist(self, router1, route2):
         r1 = self.network.getVertex(router1)
         r2 = self.network.getVertex(route2)
-        bfs(self.network, self.network.getVertex(router1))
+        neighbors = r1.getConnections()
+        for i in neighbors:
+            tempVert = i
 
-        # else:
-        #     return False
+
 
         pass
 
@@ -47,21 +48,6 @@
     @staticmethod
     def totalEdgeWeight(g):
         return sum([ISPNetwork.nodeEdgeWeight(v) for v in g]) // 2
-def bfs(g, start):
-    visited = []
-    queue = []
-    visited.append(node)
-    queue.append(node)
-
-    while queue:  # Creating loop to visit each node
-        m = queue.pop(0)
-        print(m, end=" ")
-
-        for neighbour in graph[m]:
-            if neighbour not in visited:
-                visited.append(neighbour)
-                queue.append(neighbour)
-
 
 
 if __name__ == '__main__':
@@ -73,7 +59,8 @@
     print("--------- Task2 check if path exists ---------")
     routers = [v.id for v in random.sample(list(net.network.vertList.values()), 5)]
     for i in range(4):
-        print('Router1:', routers[i], ', Router2:', routers[i+1], 'path exist?:', net.pathExist(routers[i], routers[i+1]))
+        print('Router1:', routers[i], ', Router2:', routers[i + 1], 'path exist?:',
+              net.pathExist(routers[i], routers[i + 1]))
 
     print("--------- Task3 build MST ---------")
     net.buildMST()
@@ -82,12 +69,12 @@
 
     print("--------- Task4 find shortest path in MST ---------")
     for i in range(4):
-        print(routers[i], routers[i+1], 'Path:', net.findPath(routers[i], routers[i+1]))
+        print(routers[i], routers[i + 1], 'Path:', net.findPath(routers[i], routers[i + 1]))
 
     print("--------- Task5 find shortest path in original graph ---------")
     for i in range(4):
-        print(routers[i], routers[i+1], 'Path:', net.findForwardingPath(routers[i], routers[i+1]))
+        print(routers[i], routers[i + 1], 'Path:', net.findForwardingPath(routers[i], routers[i + 1]))
 
     print("--------- Task6 find path in LowestMaxWeightFirst algorithm ---------")
     for i in range(4):
-        print(routers[i], routers[i+1], 'Path:', net.findPathMaxWeight(routers[i], routers[i+1]))
+        print(routers[i], routers[i + 1], 'Path:', net.findPathMaxWeight(routers[i], routers[i + 1]))
